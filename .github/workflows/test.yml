name: test

on:
  push:
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    
    strategy:
      fail-fast: false
      matrix:
        config:
          # GCC
          - {
              name: "Linux GCC default",
              os: ubuntu-latest,
              CC: "gcc", 
              CXX: "g++",
              SANITIZE: none,
            }
          - {
              name: "MacOS GCC default",
              os: macos-latest,
              CC: "gcc", 
              CXX: "g++",
              SANITIZE: none,
              CFLAGS: "-std=gnu++17",
            }
          - {
              name: "Linux GCC default UBSAN",
              os: ubuntu-latest,
              CC: "gcc", 
              CXX: "g++",
              SANITIZE: UB,
              CFLAGS:  "-fsanitize=undefined",
              LDFLAGS: "-fsanitize=undefined",
            }
          - {
              name: "Linux GCC default FLOAT-CAST-OVERFLOW",
              os: ubuntu-latest,
              CC: "gcc", 
              CXX: "g++",
              SANITIZE: float-cast-overflow,
              CFLAGS:  "-fsanitize=float-cast-overflow",
              LDFLAGS: "-fsanitize=float-cast-overflow",
            }
          - {
              name: "Linux GCC 7",
              os: ubuntu-latest,
              CC: "gcc-7", 
              CXX: "g++-7",
              SANITIZE: none,
            }
          - {
              name: "Linux GCC 8",
              os: ubuntu-latest,
              CC: "gcc-8", 
              CXX: "g++-8",
              SANITIZE: none,
            }
          - {
              name: "Linux GCC 9",
              os: ubuntu-latest,
              CC: "gcc-9", 
              CXX: "g++-9",
              SANITIZE: none,
            }
          - {
              name: "Linux GCC 10",
              os: ubuntu-latest,
              CC: "gcc-10", 
              CXX: "g++-10",
              SANITIZE: none,
            }
          # Clang
          - {
              name: "Linux Clang default",
              os: ubuntu-latest,
              CC: "clang", 
              CXX: "clang++",
              SANITIZE: none,
            }
          - {
              name: "MacOS Clang default",
              os: macos-latest,
              CC: "clang", 
              CXX: "clang++",
              SANITIZE: none,
              CFLAGS: "-std=c++17",
            }
          - {
              name: "Linux Clang default ASAN",
              os: ubuntu-latest,
              CC: "clang", 
              CXX: "clang++",
              SANITIZE: address,
              CFLAGS:  "-fsanitize=address -fsanitize=pointer-compare -fsanitize=pointer-subtract",
              LDFLAGS: "-fsanitize=address",
              ASAN_OPTIONS: "detect_invalid_pointer_pairs=2",
            }
          - {
              name: "Linux Clang default UBSAN",
              os: ubuntu-latest,
              CC: "clang", 
              CXX: "clang++",
              SANITIZE: UB,
              CFLAGS:  "-fsanitize=undefined",
              LDFLAGS: "-fsanitize=undefined",
            }
          - {
              name: "Linux Clang default FLOAT-CAST-OVERFLOW",
              os: ubuntu-latest,
              CC: "clang", 
              CXX: "clang++",
              SANITIZE: float-cast-overflow,
              CFLAGS:  "-fsanitize=float-cast-overflow",
              LDFLAGS: "-fsanitize=float-cast-overflow",
            }
          - {
              name: "Linux Clang 10",
              os: ubuntu-latest,
              CC: "clang-10", 
              CXX: "clang++-10",
              SANITIZE: none,
            }
          - {
              name: "Linux Clang 11",
              os: ubuntu-latest,
              CC: "clang-11", 
              CXX: "clang++-11",
              SANITIZE: none,
            }
          - {
              name: "Linux Clang 12",
              os: ubuntu-latest,
              CC: "clang-12", 
              CXX: "clang++-12",
              SANITIZE: none,
            }

    steps:
      - uses: actions/checkout@v2
      
      - name: Install GCC 7
        id: install_gcc_7
        if: ( matrix.config.CXX == 'g++-7' )
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          sudo apt-get install -y gcc-7 g++-7

      - name: Install GCC 8
        id: install_gcc_8
        if: ( matrix.config.CXX == 'g++-8' )
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          sudo apt-get install -y gcc-8 g++-8
      
      - name: build-and-test
        if: matrix.config.sanitize == 'none'
        env:
          CXX: ${{ matrix.config.cxx }}
          CC: ${{ matrix.config.cc }}
          
        run: >
          $CXX -v
          && cd ./tests
          && make -f makefile.gcc debug 
          && ./bin/Debug/test
          && make -f makefile.gcc release 
          && ./bin/Release/test
          && cd ../example/local_search
          && make -f makefile.gcc debug 
          && ./bin/Debug/local_search
          && make -f makefile.gcc release 
          && ./bin/Release/local_search
          
      - name: SANITIZE
        if: matrix.config.sanitize != 'none'
        env:
          CXX: ${{ matrix.config.cxx }}
          CC: ${{ matrix.config.cc }}
          CFLAGS:  "${{ matrix.config.cflags }} -O1 -fno-omit-frame-pointer"
          LDFLAGS: ${{ matrix.config.ldflags }}
          UBSAN_OPTIONS: "${{ matrix.config.ubsan_options }} print_stacktrace=1"
          ASAN_OPTIONS: "${{ matrix.config.asan_options }} print_stacktrace=1"
          
        run: >
          $CXX -v
          && cd ./tests
          && make -f makefile.gcc debug 
          && ./bin/Debug/test
